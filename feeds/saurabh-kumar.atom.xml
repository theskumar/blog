<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Saurabh Kumar</title><link href="https://saurabh-kumar.com/blog/" rel="alternate"></link><link href="https://saurabh-kumar.com/blog/feeds/saurabh-kumar.atom.xml" rel="self"></link><id>https://saurabh-kumar.com/blog/</id><updated>2018-03-06T17:18:33+05:30</updated><entry><title>Quickly update django admin</title><link href="https://saurabh-kumar.com/blog/quickly-update-django-admin.html" rel="alternate"></link><published>2018-03-06T17:18:33+05:30</published><updated>2018-03-06T17:18:33+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2018-03-06:blog/quickly-update-django-admin.html</id><summary type="html">&lt;p&gt;You probably just wanted to them the django cms in a quick way to give a look and feel of the brand you are working&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;Here is a 2-min guide to do&amp;nbsp;so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;admin/base_site.html&lt;/code&gt; file inside your templates&amp;nbsp;directory. &lt;/li&gt;
&lt;li&gt;Copy the following snippet in that&amp;nbsp;file.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;{% extends &amp;quot;admin/base_site.html&amp;quot; %}

{% block extrastyle %}
&amp;lt;style&amp;gt;
  :root {
    --primary-color: #1d1d1b;
    --primary-color-faded: #585853;
    --secondary-color: #4dffba;
  }

  ::selection {
    background: var(--secondary-color);
    color:var(--primary-color);
    opacity:1
  }

  ::-moz-selection {
    background: var(--secondary-color);
    color:var(--primary-color);
    opacity:1
  }
  body {
    font-family:
          -apple-system,
          BlinkMacSystemFont,
          'Segoe UI',
          Roboto,
          Helvetica,
          Arial,
          sans-serif,
          'Apple Color Emoji',
          'Segoe UI Emoji',
          'Segoe UI Symbol';
  }
  #branding h1, #branding h1 a:link, #branding h1 a:visited {
    color: #ffffff;
    font-weight: 400;
  }

  #header {
    background: var(--primary-color);
  }
  .module h2, .module caption, .inline-group h2 {
    background-color: var(--primary-color-faded);
  }
  div.breadcrumbs {
    background: var(--primary-color-faded);
  }
  a:link, a:visited {
    color: var(--primary-color-faded);
  }
  .selector-chosen h2 {
    background: var(--primary-color-faded) !important;
  }
  .button, input[type=submit], input[type=button], .submit-row input, a.button {
    background: var(--primary-color-faded);
  }
  .button.default, input[type=submit].default, .submit-row input.default {
    background: var(--primary-color);
  }
  .button:active, input[type=submit]:active, input[type=button]:active, .button:focus, input[type=submit]:focus, input[type=button]:focus, .button:hover, input[type=submit]:hover, input[type=button]:hover {
    background: var(--primary-color-faded);
    opacity: 0.8;
  }
  .button.default:active, input[type=submit].default:active, .button.default:focus, input[type=submit].default:focus, .button.default:hover, input[type=submit].default:hover {
    background: var(--primary-color);
    opacity: 0.8;
  }
&amp;lt;/style&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Now modify the following css variables in the file as per your brand&amp;nbsp;colors.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;:root {
    --primary-color: #1d1d1b;
    --primary-color-faded: #585853;
    --secondary-color: #4dffba;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;All&amp;nbsp;set!&lt;/li&gt;
&lt;/ol&gt;</summary><category term="django"></category><category term="programming"></category><category term="theme"></category></entry><entry><title>Bulk redirection with Nginx</title><link href="https://saurabh-kumar.com/blog/bulk-redirect-with-nginx.html" rel="alternate"></link><published>2017-09-25T16:43:00+05:30</published><updated>2017-09-25T16:43:00+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2017-09-25:blog/bulk-redirect-with-nginx.html</id><summary type="html">&lt;p&gt;In this post, I am going to talk about how you can setup a redirects on a server for many individual paths. It uses the hash&amp;nbsp;map&lt;/p&gt;
&lt;h4 id="creating-files"&gt;Creating&amp;nbsp;files&lt;/h4&gt;
&lt;p&gt;Create a file called &lt;code&gt;redirects-map.conf&lt;/code&gt;, each line of the file will represents a redirect rule. The format of line&amp;nbsp;is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;old_location&amp;gt; &amp;lt;new_url&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;old_location&lt;/code&gt; can be specified in both regex or plan simple&amp;nbsp;path.&lt;/p&gt;
&lt;p&gt;The regex version looks likes&amp;nbsp;this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~^/showcase/(.*)?$ /projects/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The plan simple location redirect will look&amp;nbsp;like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/contact-success/ /contact;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So your &lt;code&gt;redirects-map.conf&lt;/code&gt; file should look&amp;nbsp;like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/contact-success/ /contact;
~^/showcase/(.*)?$ /projects/;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="setting-up-nginx"&gt;Setting up&amp;nbsp;nginx&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Upload the &lt;code&gt;redirects-map.conf&lt;/code&gt; to your server at &lt;code&gt;/etc/nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the following at the top of your nginx virtualhost file, which imports the file and creates a hash&amp;nbsp;map:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;map $uri $redirected_url {
    default &amp;quot;none&amp;quot;;
    include /etc/nginx/redirects-map.conf;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in the &lt;code&gt;server&lt;/code&gt; block, write the following&amp;nbsp;rule:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pre-defined redirects
if ($redirected_url != &amp;quot;none&amp;quot;) {
    rewrite ^ $redirected_url permanent;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your virtualhost conf file should look&amp;nbsp;like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;map $uri $redirected_url {
    default &amp;quot;none&amp;quot;;
    include /etc/nginx/redirects-map.conf;
}

server {
    listen        443 ssl http2;
    server_name   example.org;

    # pre-defined redirects
    if ($redirected_url != &amp;quot;none&amp;quot;) {
        rewrite ^ $redirected_url permanent;
    }

    # rest of the rules

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Nginx has a limit on how big the redirects-map.conf can be, which is controlled via &lt;code&gt;map_hash_bucket_size&lt;/code&gt; variable. If you get the following error, &lt;code&gt;[emerg]: could not build the map_hash&lt;/code&gt;, you should increase the &lt;code&gt;map_hash_bucket_size&lt;/code&gt; to account for the filesize. Say your redirects-map.conf is 30Kb, you set the &lt;code&gt;map_hash_bucket_size&lt;/code&gt; variable in the &lt;code&gt;http&lt;/code&gt; block of &lt;code&gt;nginx.conf&lt;/code&gt; to &lt;code&gt;30720&lt;/code&gt;;&lt;/p&gt;</summary><category term="devops"></category><category term="nginx"></category></entry><entry><title>Testing (Software Development)</title><link href="https://saurabh-kumar.com/blog/testing.html" rel="alternate"></link><published>2015-06-16T01:03:10+05:30</published><updated>2015-06-16T01:03:10+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2015-06-16:blog/testing.html</id><summary type="html">&lt;p&gt;The idea here is to introduce you to the world of testing in software industry and provide some guidelines and things to keep in mind while you are doing&amp;nbsp;so.&lt;/p&gt;
&lt;iframe src="https://docs.google.com/presentation/embed?id=1yesEE3ScAsJ3L8AkNMTvEZfOcblBkyVVu1JG0KeCG-4&amp;amp;start=false&amp;amp;loop=false&amp;amp; frameborder="0" width="100%" height="378" style="border:0" allowfullscreen=true&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://docs.google.com/presentation/d/1yesEE3ScAsJ3L8AkNMTvEZfOcblBkyVVu1JG0KeCG-4/pub" target="_blank"&gt;&lt;small&gt;Open in new tab&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="what-is-software-testing"&gt;What is Software&amp;nbsp;Testing?&lt;/h3&gt;
&lt;p&gt;Testing in it&amp;#8217;s very basic terms, means &lt;strong&gt;&amp;#8220;check if something is working as espected&amp;#8221;&lt;/strong&gt;. There are many ways of doing it. Some do by it by hand, some peole automate it, some do it in controlled environment, some do it in in production, some do it themself, some ask someone else to do it for them. In software industry, testing is almost the same&amp;nbsp;thing. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consider software project analogous to your dream house building project&lt;/strong&gt;. In general, you plan for it, design it, hire people to get doing things and then in general you&amp;#8217;ll not test it while you are developing it! Once developed, you&amp;#8217;ll show it to someone, get it approved. Then you either sell it to someone or live in the same&amp;nbsp;house. &lt;/p&gt;
&lt;p&gt;If you live in that same house, you will, probably, be able to extend or modify the house as per your needs because you know how you have built it. But the other guy who purchased your house, it&amp;#8217;s quite hard to modify or extend it, because he has no clues when the house will fall apart, unless you provide a written specs of the&amp;nbsp;house.&lt;/p&gt;
&lt;p&gt;Whatever you do with the house, as time passes it becomes increasingly difficult to modify/extend/maintain that house, unless you have an efficient and repeatable way of testing it&amp;#8217;s&amp;nbsp;capabilities.&lt;/p&gt;
&lt;p&gt;Software testing is very much, what&amp;#8217;s the case with testing a house. It&amp;#8217;s useful, most people don&amp;#8217;t do it, it&amp;#8217;s costly and hard to it and you feel it&amp;#8217;s increasing need as time&amp;nbsp;passes. &lt;/p&gt;
&lt;h3 id="why-testing-is-important"&gt;Why testing is&amp;nbsp;important?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;In softwares industry, a bad code is acceptable, not a wrong&amp;nbsp;code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Know your code&amp;nbsp;works&lt;/li&gt;
&lt;li&gt;Save&amp;nbsp;time&lt;/li&gt;
&lt;li&gt;Better&amp;nbsp;code&lt;/li&gt;
&lt;li&gt;It help a software live&amp;nbsp;longer&lt;/li&gt;
&lt;li&gt;It makes everyone happy, removing&amp;nbsp;fear&lt;/li&gt;
&lt;li&gt;“Debugging is hard, testing is&amp;nbsp;easy”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="when-to-test-code"&gt;When to test&amp;nbsp;code?&lt;/h3&gt;
&lt;p&gt;As with&amp;nbsp;anything, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Softwares must be tested, &lt;em&gt;as soon as possible&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The reason being, if you don&amp;#8217;t 1) probably you&amp;#8217;ll never do it 2) the value of that test decreases as much as you delay&amp;nbsp;it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now is better than never.&lt;br /&gt;
&amp;#8212; &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python, &lt;span class="caps"&gt;PEP20&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="how-to-test"&gt;How to&amp;nbsp;test?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools are your friend, keep them handy and&amp;nbsp;sharp.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="testing-tools"&gt;Testing&amp;nbsp;Tools&lt;/h4&gt;
&lt;p&gt;If you are able to write or speak in a particular lauguage, it become very easy to test or tell it to someone what to test. Now, if you have a better tools, it just becomes a breeze to test&amp;nbsp;anything.&lt;/p&gt;
&lt;p&gt;While testing, the tools can be categorized in two catergories:&lt;br /&gt;
1. Tools that help in discovering, run and cleaning up a test (pytest, unittest, nose, tox, DjangoTestRunner, etc.)&lt;br /&gt;
2. Tools you can use inside your test code (mock, freezegun,&amp;nbsp;responses)&lt;/p&gt;
&lt;pre&gt;&lt;code class="shell"&gt;$ pip install pytest
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="python"&gt;# file: my_utils.py
def is_prime(num):
    ## Do something here and return true or false
    return True


# file: test_my_utils.py
from my_utils import is_prime

def test_is_prime():
    assert is_prime(2) is True
    assert is_prime(43) is True
    assert is_prime(&amp;quot;abc&amp;quot;) is False
    assert is_prime(10) is False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="shell"&gt;$ py.test
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="further-reading"&gt;Further&amp;nbsp;Reading:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pytest.org"&gt;pytest.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/tests/"&gt;Testing Your Code - Python Guide&lt;/a&gt; - by &lt;a href="http://www.kennethreitz.org/"&gt;Kenneth&amp;nbsp;Reitz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bit.ly/pytest0"&gt;Getting Started Testing&lt;/a&gt; - by &lt;a href="http://nedbatchelder.com/site/aboutned.html"&gt;Ned&amp;nbsp;Batchelder&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Got questions/suggestion, write in the comment&amp;nbsp;below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/theskumar/blog/edit/master/content/software/testing.md"&gt;Edit this&lt;/a&gt; | &lt;a href="https://github.com/theskumar/blog/commits/master/content/software/testing.md"&gt;Changelog/Contributors&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;</summary><category term="testing"></category><category term="pytest"></category><category term="presentation"></category><category term="software"></category><category term="python"></category></entry><entry><title>Videos – I love(d)</title><link href="https://saurabh-kumar.com/blog/videos-i-loved.html" rel="alternate"></link><published>2014-12-21T10:43:00+05:30</published><updated>2014-12-21T10:43:00+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2014-12-21:blog/videos-i-loved.html</id><summary type="html">&lt;h5 id="photography"&gt;Photography&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;There is only you and your camera. The limitations in your photography are in yourself, for what we see is what we are.&amp;#8221; – Ernst&amp;nbsp;Haas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/videoseries?list=PL049FEC5A96585CFF" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h5 id="programming"&gt;Programming&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;A programmer who subconsciously views himself as an artist will enjoy what he does and will do it better. - &lt;a href="http://www.paulgraham.com/knuth.html"&gt;Paul&amp;nbsp;Graham&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I love programming using &lt;a href="http://python.org/"&gt;Python&lt;/a&gt;. Here is the youtube playlist that I maintain all thing related to&amp;nbsp;python.&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/videoseries?list=PLyeaeoHZ1GiQG3lumYao4uFvH18BbpD5l" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="photography"></category><category term="python"></category><category term="video"></category><category term="tutorials"></category></entry><entry><title>Virtualenv vs Virtualenvwrapper</title><link href="https://saurabh-kumar.com/blog/virtualenv-vs-virtualenvwrapper.html" rel="alternate"></link><published>2014-04-05T12:43:00+05:30</published><updated>2014-04-05T12:43:00+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2014-04-05:blog/virtualenv-vs-virtualenvwrapper.html</id><summary type="html">&lt;h3 id="intro"&gt;Intro&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://virtualenv.readthedocs.org/en/latest/"&gt;virtualenv&lt;/a&gt;&lt;/strong&gt; is a tool to create isolated Python environments. It&amp;#8217;s core advantage is you can manage different version of python libraries in your different&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;It works by creating a new folder on your harddisk and then copying basic python executable and libraries into it. It also add some scripts which can be used to activate the python environment. These activation scripts when executed, they change the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable to point the folder it recides in. This is as simple as&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;You can create the virtualenv folder anywhere you like as far you execute the activation scripts provided in that folder, your current shell session will pick up the correct version of&amp;nbsp;libraries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://virtualenvwrapper.readthedocs.org/"&gt;Virtualenvwrapper&lt;/a&gt;&lt;/strong&gt; is a utility on top of &lt;code&gt;virtualenv&lt;/code&gt; that adds a bunch of utilities that allow the environment folders to be created at a single place, instead of spreading around&amp;nbsp;everywhere.&lt;/p&gt;
&lt;h4 id="make-virtualenv-work-the-way-it-should"&gt;Make virtualenv work, the way it&amp;nbsp;should&lt;/h4&gt;
&lt;p&gt;My preferred way to working around &lt;code&gt;virtualenv&lt;/code&gt; is to go the root folder of the project i&amp;#8217;m working on, create a virtualenv folder called &lt;code&gt;venv&lt;/code&gt;. You can name it anything you like as far as you stick to&amp;nbsp;it. &lt;/p&gt;
&lt;pre&gt;&lt;code class="shell"&gt;cd ~/work/myproject
virtualenv venv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the common name I use in every project. This gives advantage that I can add this folder in my global &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="shell"&gt;# if you don't have it already.
echo &amp;quot;venv/&amp;quot; &amp;gt;&amp;gt; ~/.gitignore  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can the following shell alias to your &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt;, depending on your default&amp;nbsp;shell.&lt;/p&gt;
&lt;pre&gt;&lt;code class="shell"&gt;alias sv=&amp;quot;source venv/bin/activate&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now everytime you want to work on a project, that has virtualenv at &lt;code&gt;venv&lt;/code&gt; folder you can&amp;nbsp;run.&lt;/p&gt;
&lt;pre&gt;
$ sv 
(venv) $ 
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;(venv)&lt;/code&gt; before your prompt indicates that you are in the virtualenv active in that folder. To deactivate, you can&amp;nbsp;run&lt;/p&gt;
&lt;pre&gt;
(venv) $ deactivate
$
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: If you like to include the name of directory in the prompt also, instead of just &lt;code&gt;(venv)&lt;/code&gt;, you can use the following alias&amp;nbsp;instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class="shell"&gt;alias sv='source venv/bin/activate &amp;amp;&amp;amp; export PS1=&amp;quot;(${PWD##*/}-venv)$_OLD_VIRTUAL_PS1&amp;quot;'
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
&lt;p&gt;So having this setup makes me get over two cliams by &lt;strong&gt;virtualenvwrapper&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#8217;s easy to activate, here I just have to type &lt;code&gt;sv&lt;/code&gt;, after going to project folder, which anyways I&amp;#8217;ll be going&amp;nbsp;to.&lt;/li&gt;
&lt;li&gt;Adding &lt;code&gt;venv/&lt;/code&gt; to your global gitignore will make sure it doesn&amp;#8217;t get included in git by&amp;nbsp;default.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This way you can avoid learning yet another tool or manage one less dependency. The best advantage is that all the source code of different libraries just lives by the side your project. In your favorite editor you can search globally for a term or&amp;nbsp;defination.&lt;/p&gt;
&lt;p&gt;If you use &lt;a href="https://www.sublimetext.com/"&gt;sublime text editor&lt;/a&gt;, it&amp;#8217;s as easy as pressing &lt;code&gt;cmd + shift + f&lt;/code&gt; and type what you are looking for, or use &lt;code&gt;cmd + p&lt;/code&gt; to navigate to any file inside installed python&amp;nbsp;package.&lt;/p&gt;
&lt;h4 id="summary"&gt;Summary&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;We learnt how to live without virtualenv&amp;nbsp;wrapper&lt;/li&gt;
&lt;li&gt;having python libraries installed, alongside your project helps you search and go over code base&amp;nbsp;easily&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Edits&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add enhancemnet to alias &lt;code&gt;sv&lt;/code&gt;, based on @chadhs&amp;nbsp;suggestion&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; in &lt;code&gt;sv&lt;/code&gt; alias so that &lt;span class="caps"&gt;PS&lt;/span&gt; is updated only when command succeed. Thanks&amp;nbsp;@petrjoachim.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="shell"></category><category term="python"></category><category term="virtualenv"></category></entry><entry><title>Prevent Hash DoS in python</title><link href="https://saurabh-kumar.com/blog/hash-dos-in-python.html" rel="alternate"></link><published>2013-09-01T12:00:00+05:30</published><updated>2013-09-01T12:00:00+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2013-09-01:blog/hash-dos-in-python.html</id><summary type="html">&lt;blockquote class="twitter-tweet"&gt;&lt;p&gt;$ export &lt;span class="caps"&gt;PYTHONHASHSEED&lt;/span&gt;=random &amp;#10;&amp;#10;Makes hashes of types unpredictable across &lt;a href="https://twitter.com/search?q=%23python&amp;amp;src=hash"&gt;#python&lt;/a&gt; invocations, making your app more secure to &lt;span class="caps"&gt;DOS&lt;/span&gt;&amp;nbsp;attacks.&lt;/p&gt;&amp;mdash; Anand B Pillai (@pythonhacker) &lt;a href="https://twitter.com/pythonhacker/statuses/375671280394989568"&gt;September 5, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;Denial of Service through hash table multi-collisions or &lt;a class="reference external" href="https://web.archive.org/web/20131016035929/http://www.purehacking.com/blogs/josh-zlatin/introduction-to-hash-dos-attacks"&gt;Hash DoS&lt;/a&gt; has been
first reported in 28-Dec-2011 &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Python and Ruby are partially vulnerable, depending on version or whether the server
running the code is a 32 bit or 64 bit machine. Python 2 by default does not provide
random value for &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;PYTHONHASHSEED&lt;/span&gt;&lt;/tt&gt; &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt; though it&amp;#8217;s behaviour is changed in
python 3 &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[3]&lt;/a&gt; which means it has &lt;tt class="docutils literal"&gt;random&lt;/tt&gt; as it default&amp;nbsp;value.&lt;/p&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://web.archive.org/web/20140606214923/https://www.nruns.com/_downloads/advisory28122011.pdf"&gt;https://web.archive.org/web/20140606214923/https://www.nruns.com/_downloads/advisory28122011.pdf&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://docs.python.org/2/using/cmdline.html#envvar-PYTHONHASHSEED"&gt;http://docs.python.org/2/using/cmdline.html#envvar-&lt;span class="caps"&gt;PYTHONHASHSEED&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED"&gt;http://docs.python.org/3/using/cmdline.html#envvar-&lt;span class="caps"&gt;PYTHONHASHSEED&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="security"></category></entry><entry><title>Django: Useful resource compilation</title><link href="https://saurabh-kumar.com/blog/django.html" rel="alternate"></link><published>2013-08-20T04:43:00+05:30</published><updated>2013-08-20T04:43:00+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2013-08-20:blog/django.html</id><summary type="html">&lt;p&gt;The best place to get started with &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; is to explore it&amp;#8217;s official site and then dig into it&amp;#8217;s &lt;a href="https://github.com/django/django"&gt;source code&lt;/a&gt; on Github, and then ask questions either on &lt;a href="http://stackoverflow.com/questions/tagged/django"&gt;stack overflow&lt;/a&gt; or it&amp;#8217;s user&amp;#8217;s &lt;a href="https://groups.google.com/forum/?fromgroups#!forum/django-users"&gt;mailing-list&lt;/a&gt;. And for obvious reasons, you&amp;#8217;ll find Google your friend at every&amp;nbsp;step.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Django request-response cycle" src="https://fbcdn-sphotos-c-a.akamaihd.net/hphotos-ak-xta1/t31.0-8/12080375_10154236046688098_3540696576391451460_o.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Here is a list of my personal recommendation and references to the some of resources, I found useful and&amp;nbsp;interesting.&lt;/p&gt;
&lt;h4 id="books-magazines"&gt;Books &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Magazines&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pythonweekly.com/"&gt;Python&amp;nbsp;Weekly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://propython.com/"&gt;Pro&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://django.2scoops.org/"&gt;Two scoops of&amp;nbsp;Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="articles"&gt;Articles&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.etianen.com/blog/2013/06/08/django-querysets/"&gt;Using Django querysets effectively&lt;/a&gt; - Use of &lt;code&gt;.iterator()&lt;/code&gt; to make the database query&amp;nbsp;efficient.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pydanny.com/core-concepts-django-modelforms.html"&gt;Core Concepts of Django&amp;nbsp;ModelForms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://denibertovic.com/posts/celery-best-practices/"&gt;Celery Best Practices&lt;/a&gt; by&amp;nbsp;Deni&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="apps-libraries"&gt;Apps &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Libraries&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.celeryproject.org/en/latest/django/index.html"&gt;Celery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python-requests.org/en/latest/"&gt;Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tomchristie/django-rest-framework"&gt;Django Rest Framework&lt;/a&gt; - Awesome web-browseable Web &lt;span class="caps"&gt;REST&lt;/span&gt;&amp;nbsp;APIs&lt;/li&gt;
&lt;li&gt;&lt;a href="http://haystacksearch.org/"&gt;Haystack&lt;/a&gt; - modular search for&amp;nbsp;django.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Adys/django-push-notifications"&gt;django-push-notifications&lt;/a&gt; - Send push notifications to mobile devices through &lt;span class="caps"&gt;GCM&lt;/span&gt; or &lt;span class="caps"&gt;APNS&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mezzanine.jupo.org/"&gt;Mezzanine&lt;/a&gt; - &lt;span class="caps"&gt;CMS&lt;/span&gt; Based on&amp;nbsp;Django&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sysadmin-deployment"&gt;Sysadmin/&amp;nbsp;Deployment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://newrelic.com/"&gt;Newrelic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.fabfile.org/en/1.6/"&gt;Fabric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansible/ansible"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getsentry.com"&gt;Sentry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If you have reached till here and would like to explore more checkout &lt;a href="https://github.com/stars/theskumar?direction=desc&amp;amp;language=python&amp;amp;q=&amp;amp;sort=stars"&gt;my stared python repo list&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;EDITS&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is an &lt;a href="https://github.com/rosarior/awesome-django#awesome-django"&gt;awesome-django&lt;/a&gt; project on github that has curated list of awesome Django apps and projects, that you should definetely&amp;nbsp;check-out. &lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="django"></category></entry><entry><title>What it’s like to work on Open Source Projects</title><link href="https://saurabh-kumar.com/blog/working-on-open-source-project.html" rel="alternate"></link><published>2013-08-20T04:43:00+05:30</published><updated>2013-08-20T04:43:00+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2013-08-20:blog/working-on-open-source-project.html</id><summary type="html">&lt;p&gt;You’ll hear the word “open” a&amp;nbsp;lot.&lt;/p&gt;
&lt;p&gt;Open means you can talk about your work publicly. Anyone from anywhere
might pop in and comment on your work. You can pop in and comment on any
other&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;Open also means people won’t be telling you what to do very much, but
rather expecting you to figure out how to contribute. Along with that,
the org chart is never kept up to date, and is probably more of a dag or
hypergraph than a tree. This is exciting and fun, but can also be
challenging to&amp;nbsp;navigate.&lt;/p&gt;
&lt;div class="section" id="becoming-effective"&gt;
&lt;h2&gt;Becoming&amp;nbsp;Effective&lt;/h2&gt;
&lt;p&gt;As a new employee, one of your first priorities is becoming effective at
your basic job. For example, if you are on the &lt;span class="caps"&gt;JS&lt;/span&gt; engine team, your job
is to fix bugs and add features. Fixing bugs is hard, so it will take a
lot of practice and learning to become good at&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;There are all kinds of new procedures, skills, and/or codebases to
learn, but what’s special in open-source projects is that you need to
learn how to decide what to work on. Even if you are producing
top-quality code at maximum speed, the value of that code is still
entirely dependent on how relevant the project&amp;nbsp;is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-work-on"&gt;
&lt;h2&gt;What to work&amp;nbsp;on&lt;/h2&gt;
&lt;p&gt;It’s not a total free-for-all. You will probably get assignments. But
the assignment may be very general, like &lt;strong&gt;“make &lt;span class="caps"&gt;GC&lt;/span&gt; not suck”&lt;/strong&gt;. So
you’d need to figure out what that really means. And you’ll probably get
way more assignments run past you than you could ever do. So even if you
try to just do those, you’ll have to choose. And quite often assignments
are more offered than, well,&amp;nbsp;assigned.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-dont-they-just-tell-people-what-to-do"&gt;
&lt;h2&gt;Why don’t they just tell people what to&amp;nbsp;do?&lt;/h2&gt;
&lt;p&gt;As for a open-source developer, one reason is that they are busy with
all kinds of stuff, and they don’t really have time for that. But more
importantly, they don’t know everything, so they’d really like your
ideas and your help in making decisions. And most of all, they find that
the results are far better when people choose their own projects–and
choose things that they are fired up about, whether it’s because they’ll
get to learn, they’ll get to feel badass, or for whatever reason it’s
something important to them&amp;nbsp;personally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-how-do-you-figure-out-what-to-do"&gt;
&lt;h2&gt;So how do you figure out what to&amp;nbsp;do?&lt;/h2&gt;
&lt;p&gt;In one word, &lt;strong&gt;listen&lt;/strong&gt;. Talk regularly with people in and around your
area to find out what problems need solving, bugs need fixing,
enhancements are needed. In two words, &lt;strong&gt;listen intelligently&lt;/strong&gt;. Simply
aggregating everyone else’s opinion is &lt;span class="caps"&gt;OK&lt;/span&gt; to start with, but I’d really
much rather see everyone else’s opinion blended with your own unique
point of view. Plus you’ll want to pick out the projects that you
currently have the skills to get traction on and that you’ll find
interesting. And you’ll need to figure out who really knows what’s worth
working on vs. who everyone else thinks knows what’s working on vs. who
thinks they know what’s worth working on but really&amp;nbsp;doesn’t.&lt;/p&gt;
&lt;p&gt;One lesson from my experience is that figuring out what to work on is
pretty hard. So if your first few assignments seem to turn out not to be
of much value, don’t sweat it. (Often new people are offered
low-priority stuff or weird ideas so they can learn without blocking
ongoing critical work.) Just keep talking, listening, trying things out,
and&amp;nbsp;learning.&lt;/p&gt;
&lt;p&gt;Also: watch out for tar pits. There are projects out there to work on
that are ill-defined, or that are popular to talk about but not really
useful, or that will have an ever-expanding scope, or that have been
tried 3 times and have always failed. You want to work where you will
have maximum impact, not minimum. So if you find yourself in one of
these, call for help: get out or get someone to help you get&amp;nbsp;out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="becoming-visible"&gt;
&lt;h2&gt;Becoming&amp;nbsp;Visible&lt;/h2&gt;
&lt;p&gt;I think visibility is important in pretty much any software company
bigger than &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Dunbar's_number"&gt;Dunbar’s number&lt;/a&gt;, but in such a fluid environment, it’s
even more important. If you’re after external rewards, your managers and
peers need to know about the great stuff you’re doing. If you’re after
getting to work on the big cool projects and such, people need to know
who you are and what you can&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;You don’t need to worry about becoming super-visible immediately, but
you can start taking steps to improve your future visibility right&amp;nbsp;away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Starting a blog is an excellent thing to do.&lt;/strong&gt; You may think you
don’t have much to write about. But you do: your work and your
experiences at Mozilla. There is almost certainly someone out there
who’s interested. I started this blog talking about abstruse aspects
of program analysis, and even that found an&amp;nbsp;audience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Talking to people regularly in person or on &lt;span class="caps"&gt;IRC&lt;/span&gt; is also great, of
course. “What are you working on” is a good conversation starter and
likely to be&amp;nbsp;reciprocated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Asking people for help automatically lets them know what you’re
working&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;Helping other people gives them a chance to see what you can&amp;nbsp;do.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also of course all the mailing lists and newsgroups and
Yammer. I have the sense that a lot of the talk on there is not that
productive so I’m hesitant to recommend spending more time on them to a
new person, but &lt;span class="caps"&gt;YMMV&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="being-visible"&gt;
&lt;h2&gt;Being&amp;nbsp;Visible&lt;/h2&gt;
&lt;p&gt;The common notion of visibility is mostly abouttelling other people
about your accomplishments (which for us extends also to your
capabilities), but because we are so open, there is another side, which
is letting people see you&amp;nbsp;working.&lt;/p&gt;
&lt;p&gt;We are supposed to be “all open and stuff”. It can be intimidating to
work out in public where anyone could see you fail or criticize you. I
highly recommend responding by embracing it. In Bugzilla, use the
assignee field to show what you’re working on. Post half-baked design
ideas before you start coding. Post WIPs (works in progress) to let
people see your crappy incomplete code. If someone asks you to do
something and you don’t have time or think it’s a bad idea, say so right&amp;nbsp;away.&lt;/p&gt;
&lt;p&gt;The advantage of this is that you don’t have much to worry about. No
one’s going to discover what you’ve been working on for the past 2
months and criticize you for wasting your time, because they would have
been able to give you feedback right away. No one’s going to complain
you’re not working on their favorite bug, because they can either see
that you are, or you’ve told them you’re not. If it’s all in the open,
and no one’s complaining, it’s fair for you to think you’re on the right&amp;nbsp;track.&lt;/p&gt;
&lt;p&gt;Just to make sure you don’t think I’m (totally) crazy, I should point
out that there are times to be less open. When you’re working on a
proposal to change procedures or do a crazy project, or a presentation,
or something like that, it does make sense to get feedback from a small
group before taking it public. And that is in fact &lt;span class="caps"&gt;OK&lt;/span&gt; around&amp;nbsp;here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="becoming-influential"&gt;
&lt;h2&gt;Becoming&amp;nbsp;Influential&lt;/h2&gt;
&lt;p&gt;You probably have all kinds of ideas about how to make the web better,
or the &lt;span class="caps"&gt;JS&lt;/span&gt; engine, or Bugzilla, or our review process. That’s&amp;nbsp;excellent.&lt;/p&gt;
&lt;p&gt;But don’t be too surprised if at first most of your ideas are met with
skepticism, misunderstanding, refusal, or are just ignored. There are
way more ideas out there than there are people to work on them, so
everyone already has 35 great ideas they’d love to try. They’d have to
decide that your new idea is better than those 35 in order to think
about it all that much. Or maybe they’ve already heard that idea and
they rank it #67, so they’re not that motivated to think about it again.
Getting ideas heard can be&amp;nbsp;hard.&lt;/p&gt;
&lt;p&gt;But also, don’t be discouraged if your ideas don’t seem to move people
very much. It doesn’t mean your ideas are bad. It doesn’t mean no one’s
ever going to listen to them. It does mean that if you want to be heard
you’re going to have to rise to the challenge and work at&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;The easiest way to get more attention for your ideas is if you have
“open source street cred”. If you are new, there is of course a good
chance that you don’t have any yet. But as you become effective and
visible, you will get that street cred and more chance to be&amp;nbsp;heard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-to-do-in-the-meantime"&gt;
&lt;h2&gt;What to do in the&amp;nbsp;meantime?&lt;/h2&gt;
&lt;p&gt;I don’t have a recipe. I recommend just to keep trying. That’s also why
I said not to get discouraged. You can try an idea on different people.
Maybe the first 5 are not too interested but the 6th has time and wants
to work on it. You can try it over time. Maybe when people first hear it
is unfamiliar and weird, but after talking with you about it over time,
they come to see its merits. You can write code or do some experiments
to test the idea and show how it might work. You can change and refine
the idea to see if different versions get more attention. If you keep
trying and pay attention to what works and what doesn’t, you will gain
skill in promoting your&amp;nbsp;ideas.&lt;/p&gt;
&lt;p&gt;One thing I think is clearly effective in getting heard is service. If
you help other people solve problems, make their jobs easier, or help
them get their ideas heard and implemented, there’s a good chance
they’ll be more inclined to listen to you and help you out. That can go
a long way even before you have any street&amp;nbsp;cred.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you’re effective, visible, and influential, then you’ve made it. It’s
only a matter of time that will get you up the&amp;nbsp;ladder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="related-readings"&gt;
&lt;h2&gt;Related&amp;nbsp;Readings&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://stillflowing.net/2014/12/21/an-experience-in-contributing-to-open-source/"&gt;An Experience in Contributing to Open Source&lt;/a&gt; by Alex&amp;nbsp;Vaccaro&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.shubhro.com/2014/12/27/software-engineers-should-write/"&gt;Software engineers should write&lt;/a&gt; by Shubhro&amp;nbsp;Saha&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://hintjens.com/blog:95"&gt;Ten Rules for Open Source&amp;nbsp;Success&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary><category term="open-source"></category><category term="community"></category><category term="social"></category></entry></feed>