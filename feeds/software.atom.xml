<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Saurabh Kumar - software</title><link href="https://saurabh-kumar.com/blog/" rel="alternate"></link><link href="https://saurabh-kumar.com/blog/feeds/software.atom.xml" rel="self"></link><id>https://saurabh-kumar.com/blog/</id><updated>2018-03-06T17:18:33+05:30</updated><entry><title>Quickly add custom branding to Django admin site</title><link href="https://saurabh-kumar.com/blog/quickly-update-django-admin.html" rel="alternate"></link><published>2018-03-06T17:18:33+05:30</published><updated>2018-03-06T17:18:33+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2018-03-06:/blog/quickly-update-django-admin.html</id><summary type="html">&lt;p&gt;How to quickly customize django admin&amp;nbsp;theme.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a quick 2mins guide to add custom branding to your Django Admin&amp;nbsp;Site.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step-1:&lt;/strong&gt; Create a &lt;code&gt;admin/base_site.html&lt;/code&gt; file inside your templates directory. &lt;br&gt;
&lt;strong&gt;Step-2:&lt;/strong&gt; Copy/Paste the following snippet in that&amp;nbsp;file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;!-- yoursite/templates/admin/base_site.html --&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin/base_site.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;extrastyle&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;  :root {&lt;/span&gt;
&lt;span class="x"&gt;    --primary-color: #1d1d1b;&lt;/span&gt;
&lt;span class="x"&gt;    --primary-color-faded: #585853;&lt;/span&gt;
&lt;span class="x"&gt;    --secondary-color: #4dffba;&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;

&lt;span class="x"&gt;  ::selection {&lt;/span&gt;
&lt;span class="x"&gt;    background: var(--secondary-color);&lt;/span&gt;
&lt;span class="x"&gt;    color:var(--primary-color);&lt;/span&gt;
&lt;span class="x"&gt;    opacity:1&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;

&lt;span class="x"&gt;  ::-moz-selection {&lt;/span&gt;
&lt;span class="x"&gt;    background: var(--secondary-color);&lt;/span&gt;
&lt;span class="x"&gt;    color:var(--primary-color);&lt;/span&gt;
&lt;span class="x"&gt;    opacity:1&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;  body {&lt;/span&gt;
&lt;span class="x"&gt;    font-family:&lt;/span&gt;
&lt;span class="x"&gt;          -apple-system,&lt;/span&gt;
&lt;span class="x"&gt;          BlinkMacSystemFont,&lt;/span&gt;
&lt;span class="x"&gt;          &amp;#39;Segoe UI&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;          Roboto,&lt;/span&gt;
&lt;span class="x"&gt;          Helvetica,&lt;/span&gt;
&lt;span class="x"&gt;          Arial,&lt;/span&gt;
&lt;span class="x"&gt;          sans-serif,&lt;/span&gt;
&lt;span class="x"&gt;          &amp;#39;Apple Color Emoji&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;          &amp;#39;Segoe UI Emoji&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;          &amp;#39;Segoe UI Symbol&amp;#39;;&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;  #branding h1, #branding h1 a:link, #branding h1 a:visited {&lt;/span&gt;
&lt;span class="x"&gt;    color: #ffffff;&lt;/span&gt;
&lt;span class="x"&gt;    font-weight: 400;&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;

&lt;span class="x"&gt;  #header {&lt;/span&gt;
&lt;span class="x"&gt;    background: var(--primary-color);&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;  .module h2, .module caption, .inline-group h2 {&lt;/span&gt;
&lt;span class="x"&gt;    background-color: var(--primary-color-faded);&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;  div.breadcrumbs {&lt;/span&gt;
&lt;span class="x"&gt;    background: var(--primary-color-faded);&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;  a:link, a:visited {&lt;/span&gt;
&lt;span class="x"&gt;    color: var(--primary-color-faded);&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;  .selector-chosen h2 {&lt;/span&gt;
&lt;span class="x"&gt;    background: var(--primary-color-faded) !important;&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;  .button, input[type=submit], input[type=button], .submit-row input, a.button {&lt;/span&gt;
&lt;span class="x"&gt;    background: var(--primary-color-faded);&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;  .button.default, input[type=submit].default, .submit-row input.default {&lt;/span&gt;
&lt;span class="x"&gt;    background: var(--primary-color);&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;  .button:active, input[type=submit]:active, input[type=button]:active, .button:focus, input[type=submit]:focus, input[type=button]:focus, .button:hover, input[type=submit]:hover, input[type=button]:hover {&lt;/span&gt;
&lt;span class="x"&gt;    background: var(--primary-color-faded);&lt;/span&gt;
&lt;span class="x"&gt;    opacity: 0.8;&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;  .button.default:active, input[type=submit].default:active, .button.default:focus, input[type=submit].default:focus, .button.default:hover, input[type=submit].default:hover {&lt;/span&gt;
&lt;span class="x"&gt;    background: var(--primary-color);&lt;/span&gt;
&lt;span class="x"&gt;    opacity: 0.8;&lt;/span&gt;
&lt;span class="x"&gt;  }&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Step-3:&lt;/strong&gt; Now modify the following css variables in the above file as per your brand&amp;nbsp;colors.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;--primary-color&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;#1d1d1b&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;--primary-color-faded&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;#585853&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;--secondary-color&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;#4dffba&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Step-4:&lt;/strong&gt; Reload your admin site and you should see updated&amp;nbsp;theme!&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Take&amp;nbsp;Away&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; Variables is a powerful feature you can use to add custom&amp;nbsp;themes.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;</content><category term="django"></category><category term="theming"></category><category term="admin"></category></entry><entry><title>Bulk redirection with Nginx</title><link href="https://saurabh-kumar.com/blog/bulk-redirect-with-nginx.html" rel="alternate"></link><published>2017-09-25T16:43:00+05:30</published><updated>2017-09-25T16:43:00+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2017-09-25:/blog/bulk-redirect-with-nginx.html</id><summary type="html">&lt;p&gt;Walkthrough of how you can utilize the power of nginx to setup mass redirects of random urls on your&amp;nbsp;server&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this post, I am going to talk about how you can setup a redirects on a server for many individual paths. It uses the hash&amp;nbsp;map&lt;/p&gt;
&lt;h2 id="creating-files"&gt;Creating files&lt;a class="headerlink" href="#creating-files" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Create a file called &lt;code&gt;redirects-map.conf&lt;/code&gt;, each line of the file will represents a redirect rule. The format of line&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;old_location&amp;gt; &amp;lt;new_url&amp;gt;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;old_location&lt;/code&gt; can be specified in both regex or plan simple&amp;nbsp;path.&lt;/p&gt;
&lt;p&gt;The regex version looks likes&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~^/showcase/(.*)?$ /projects/;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The plan simple location redirect will look&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/contact-success/ /contact;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So your &lt;code&gt;redirects-map.conf&lt;/code&gt; file should look&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /etc/nginx/redirects-map.conf &lt;/span&gt;

&lt;span class="k"&gt;/contact-success/&lt;/span&gt; &lt;span class="s"&gt;/contact&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;~^/showcase/(.*)?$&lt;/span&gt; &lt;span class="s"&gt;/projects/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="setting-up-nginx"&gt;Setting up nginx&lt;a class="headerlink" href="#setting-up-nginx" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Upload the &lt;code&gt;redirects-map.conf&lt;/code&gt; to your server at &lt;code&gt;/etc/nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the following at the top of your nginx virtualhost file, which imports the file and creates a hash&amp;nbsp;map:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$redirected_url&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;default&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/redirects-map.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then in the &lt;code&gt;server&lt;/code&gt; block, write the following&amp;nbsp;rule:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pre-defined redirects&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$redirected_url&lt;/span&gt; &lt;span class="s"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;none&amp;quot;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;rewrite&lt;/span&gt; &lt;span class="s"&gt;^&lt;/span&gt; &lt;span class="nv"&gt;$redirected_url&lt;/span&gt; &lt;span class="s"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now your virtualhost conf file should look&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$redirected_url&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;default&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/redirects-map.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;        &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt; &lt;span class="s"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt;   &lt;span class="s"&gt;example.org&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# pre-defined redirects&lt;/span&gt;
    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$redirected_url&lt;/span&gt; &lt;span class="s"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;none&amp;quot;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;rewrite&lt;/span&gt; &lt;span class="s"&gt;^&lt;/span&gt; &lt;span class="nv"&gt;$redirected_url&lt;/span&gt; &lt;span class="s"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# rest of the rules&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;Nginx has a limit on how big the &lt;code&gt;redirects-map.conf&lt;/code&gt; can be, which is controlled via &lt;code&gt;map_hash_bucket_size&lt;/code&gt; variable. If you get the following error, &lt;code&gt;[emerg]: could not build the map_hash&lt;/code&gt;, you should increase the &lt;code&gt;map_hash_bucket_size&lt;/code&gt; to account for the filesize. Say your redirects-map.conf is 30Kb, you set the &lt;code&gt;map_hash_bucket_size&lt;/code&gt; variable in the &lt;code&gt;http&lt;/code&gt; block of &lt;code&gt;nginx.conf&lt;/code&gt; to &lt;code&gt;30720&lt;/code&gt;;&lt;/p&gt;
&lt;/div&gt;</content><category term="devops"></category><category term="nginx"></category></entry><entry><title>Frontend Development</title><link href="https://saurabh-kumar.com/blog/frontend.html" rel="alternate"></link><published>2017-04-02T12:43:00+05:30</published><updated>2017-04-02T12:43:00+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2017-04-02:/blog/frontend.html</id><summary type="html">&lt;p&gt;This blog (work in progress) tried to get you familiar with the tools and concepts that I use in day to day&amp;nbsp;basis.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This blog (work in progress) tried to get you familiar with the tools and concepts that I use in day to day&amp;nbsp;basis.&lt;/p&gt;
&lt;h1 id="concepts"&gt;Concepts&lt;a class="headerlink" href="#concepts" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The &lt;strong&gt;Block, Element, Modifier&lt;/strong&gt; methodology (commonly referred to as &lt;a href="http://getbem.com/introduction/"&gt;&lt;span class="caps"&gt;BEM&lt;/span&gt;&lt;/a&gt;) is a popular naming convention for classes in &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;CSS&lt;/span&gt;.  Its goal is to help developers better understand the relationship between the &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;CSS&lt;/span&gt; in a given project. Here is a quick&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;/* Block component */&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;btn&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c"&gt;/* Element that depends upon the block */&lt;/span&gt; 
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;btn__price&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c"&gt;/* Modifier that changes the style of the block */&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;btn--orange&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; 
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;btn--big&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are some of the recommended reading materials:&lt;br&gt;
1. https://css-tricks.com/bem-101/&lt;br&gt;
2.&amp;nbsp;https://en.bem.info/&lt;/p&gt;
&lt;h1 id="tooling"&gt;Tooling&lt;a class="headerlink" href="#tooling" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://emmet.io/"&gt;Emmet&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Edits&lt;/strong&gt;&lt;/p&gt;</content><category term="frontend"></category></entry><entry><title>Testing (Software Development)</title><link href="https://saurabh-kumar.com/blog/testing.html" rel="alternate"></link><published>2015-06-16T01:03:10+05:30</published><updated>2015-06-16T01:03:10+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2015-06-16:/blog/testing.html</id><summary type="html">&lt;p&gt;Getting familiar with testing in software&amp;nbsp;industry.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The idea here is to introduce you to the world of testing in software industry and provide some guidelines and things to keep in mind while you are doing&amp;nbsp;so.&lt;/p&gt;
&lt;iframe src="https://docs.google.com/presentation/embed?id=1yesEE3ScAsJ3L8AkNMTvEZfOcblBkyVVu1JG0KeCG-4&amp;amp;start=false&amp;amp;loop=false&amp;amp; frameborder="0" width="100%" height="378" style="border:0" allowfullscreen=true&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://docs.google.com/presentation/d/1yesEE3ScAsJ3L8AkNMTvEZfOcblBkyVVu1JG0KeCG-4/pub" target="_blank"&gt;&lt;small&gt;Open in new tab&lt;/small&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="what-is-software-testing"&gt;What is Software Testing?&lt;a class="headerlink" href="#what-is-software-testing" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Testing in it&amp;#8217;s very basic terms, means &lt;strong&gt;&amp;#8220;check if something is working as espected&amp;#8221;&lt;/strong&gt;. There are many ways of doing it. Some do by it by hand, some peole automate it, some do it in controlled environment, some do it in in production, some do it themself, some ask someone else to do it for them. In software industry, testing is almost the same&amp;nbsp;thing. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consider software project analogous to your dream house building project&lt;/strong&gt;. In general, you plan for it, design it, hire people to get doing things and then in general you&amp;#8217;ll not test it while you are developing it! Once developed, you&amp;#8217;ll show it to someone, get it approved. Then you either sell it to someone or live in the same&amp;nbsp;house. &lt;/p&gt;
&lt;p&gt;If you live in that same house, you will, probably, be able to extend or modify the house as per your needs because you know how you have built it. But the other guy who purchased your house, it&amp;#8217;s quite hard to modify or extend it, because he has no clues when the house will fall apart, unless you provide a written specs of the&amp;nbsp;house.&lt;/p&gt;
&lt;p&gt;Whatever you do with the house, as time passes it becomes increasingly difficult to modify/extend/maintain that house, unless you have an efficient and repeatable way of testing it&amp;#8217;s&amp;nbsp;capabilities.&lt;/p&gt;
&lt;p&gt;Software testing is very much, what&amp;#8217;s the case with testing a house. It&amp;#8217;s useful, most people don&amp;#8217;t do it, it&amp;#8217;s costly and hard to it and you feel it&amp;#8217;s increasing need as time&amp;nbsp;passes. &lt;/p&gt;
&lt;h1 id="why-testing-is-important"&gt;Why testing is important?&lt;a class="headerlink" href="#why-testing-is-important" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;In softwares industry, a bad code is acceptable, not a wrong&amp;nbsp;code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Know your code&amp;nbsp;works&lt;/li&gt;
&lt;li&gt;Save&amp;nbsp;time&lt;/li&gt;
&lt;li&gt;Better&amp;nbsp;code&lt;/li&gt;
&lt;li&gt;It help a software live&amp;nbsp;longer&lt;/li&gt;
&lt;li&gt;It makes everyone happy, removing&amp;nbsp;fear&lt;/li&gt;
&lt;li&gt;“Debugging is hard, testing is&amp;nbsp;easy”&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="when-to-test-code"&gt;When to test code?&lt;a class="headerlink" href="#when-to-test-code" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As with&amp;nbsp;anything, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Softwares must be tested, &lt;em&gt;as soon as possible&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The reason being, if you don&amp;#8217;t 1) probably you&amp;#8217;ll never do it 2) the value of that test decreases as much as you delay&amp;nbsp;it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now is better than never.&lt;br&gt;
&amp;#8212; &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python, &lt;span class="caps"&gt;PEP20&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="how-to-test"&gt;How to test?&lt;a class="headerlink" href="#how-to-test" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools are your friend, keep them handy and&amp;nbsp;sharp.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="testing-tools"&gt;Testing Tools&lt;a class="headerlink" href="#testing-tools" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are able to write or speak in a particular lauguage, it become very easy to test or tell it to someone what to test. Now, if you have a better tools, it just becomes a breeze to test&amp;nbsp;anything.&lt;/p&gt;
&lt;p&gt;While testing, the tools can be categorized in two catergories:&lt;br&gt;
1. Tools that help in discovering, run and cleaning up a test (pytest, unittest, nose, tox, DjangoTestRunner, etc.)&lt;br&gt;
2. Tools you can use inside your test code (mock, freezegun,&amp;nbsp;responses)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pytest
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# file: my_utils.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;## Do something here and return true or false&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;


&lt;span class="c1"&gt;# file: test_my_utils.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;my_utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;is_prime&lt;/span&gt;

&lt;span class="hll"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_is_prime&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;/span&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;is_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;is_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;is_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;is_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ py.test
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="further-reading"&gt;Further Reading:&lt;a class="headerlink" href="#further-reading" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pytest.org"&gt;pytest.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python-guide.org/en/latest/writing/tests/"&gt;Testing Your Code - Python Guide&lt;/a&gt; - by &lt;a href="http://www.kennethreitz.org/"&gt;Kenneth&amp;nbsp;Reitz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bit.ly/pytest0"&gt;Getting Started Testing&lt;/a&gt; - by &lt;a href="http://nedbatchelder.com/site/aboutned.html"&gt;Ned&amp;nbsp;Batchelder&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Got questions/suggestion, write in the comment&amp;nbsp;below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/theskumar/blog/edit/master/content/software/testing.md"&gt;Edit this&lt;/a&gt; | &lt;a href="https://github.com/theskumar/blog/commits/master/content/software/testing.md"&gt;Changelog/Contributors&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;</content><category term="testing"></category><category term="pytest"></category><category term="presentation"></category><category term="software"></category><category term="python"></category></entry><entry><title>Virtualenv vs Virtualenvwrapper</title><link href="https://saurabh-kumar.com/blog/virtualenv-vs-virtualenvwrapper.html" rel="alternate"></link><published>2014-04-05T12:43:00+05:30</published><updated>2014-04-05T12:43:00+05:30</updated><author><name>Saurabh Kumar</name></author><id>tag:saurabh-kumar.com,2014-04-05:/blog/virtualenv-vs-virtualenvwrapper.html</id><summary type="html">&lt;p&gt;This post discusses if given the choice between virtualenv and virtualenvwrapper, what you should choose for working on a project and&amp;nbsp;why?&lt;/p&gt;</summary><content type="html">&lt;h1 id="intro"&gt;Intro&lt;a class="headerlink" href="#intro" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://virtualenv.readthedocs.org/en/latest/"&gt;virtualenv&lt;/a&gt;&lt;/strong&gt; is a tool to create isolated Python environments. It&amp;#8217;s core advantage is you can manage different version of python libraries in your different&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;It works by creating a new folder on your harddisk and then copying basic python executable and libraries into it. It also add some scripts which can be used to activate the python environment. These activation scripts when executed, they change the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable to point the folder it recides in. This is as simple as&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;You can create the virtualenv folder anywhere you like as far you execute the activation scripts provided in that folder, your current shell session will pick up the correct version of&amp;nbsp;libraries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://virtualenvwrapper.readthedocs.org/"&gt;Virtualenvwrapper&lt;/a&gt;&lt;/strong&gt; is a utility on top of &lt;code&gt;virtualenv&lt;/code&gt; that adds a bunch of utilities that allow the environment folders to be created at a single place, instead of spreading around&amp;nbsp;everywhere.&lt;/p&gt;
&lt;h2 id="make-virtualenv-work-the-way-it-should"&gt;Make virtualenv work, the way it should&lt;a class="headerlink" href="#make-virtualenv-work-the-way-it-should" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My preferred way to working around &lt;code&gt;virtualenv&lt;/code&gt; is to go the root folder of the project i&amp;#8217;m working on, create a virtualenv folder called &lt;code&gt;venv&lt;/code&gt;. You can name it anything you like as far as you stick to&amp;nbsp;it. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/work/myproject
virtualenv venv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the common name I use in every project. This gives advantage that I can add this folder in my global &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# if you don&amp;#39;t have it already.&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;venv/&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.gitignore  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can the following shell alias to your &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt;, depending on your default&amp;nbsp;shell.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;sv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;source venv/bin/activate&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now everytime you want to work on a project, that has virtualenv at &lt;code&gt;venv&lt;/code&gt; folder you can&amp;nbsp;run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sv 
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;(venv)&lt;/code&gt; before your prompt indicates that you are in the virtualenv active in that folder. To deactivate, you can&amp;nbsp;run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; $ deactivate
$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;If you like to include the name of directory in the prompt also, instead of just &lt;code&gt;(venv)&lt;/code&gt;, you can use the following alias&amp;nbsp;instead:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias sv='source venv/bin/activate &amp;amp;&amp;amp; export PS1="(${PWD##*/}-venv)$_OLD_VIRTUAL_PS1"'&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;So having this setup makes me get over two cliams by &lt;strong&gt;virtualenvwrapper&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#8217;s easy to activate, here I just have to type &lt;code&gt;sv&lt;/code&gt;, after going to project folder, which anyways I&amp;#8217;ll be going&amp;nbsp;to.&lt;/li&gt;
&lt;li&gt;Adding &lt;code&gt;venv/&lt;/code&gt; to your global gitignore will make sure it doesn&amp;#8217;t get included in git by&amp;nbsp;default.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This way you can avoid learning yet another tool or manage one less dependency. The best advantage is that all the source code of different libraries just lives by the side your project. In your favorite editor you can search globally for a term or&amp;nbsp;defination.&lt;/p&gt;
&lt;p&gt;If you use &lt;a href="https://www.sublimetext.com/"&gt;sublime text editor&lt;/a&gt;, it&amp;#8217;s as easy as pressing &lt;code&gt;cmd + shift + f&lt;/code&gt; and type what you are looking for, or use &lt;code&gt;cmd + p&lt;/code&gt; to navigate to any file inside installed python&amp;nbsp;package.&lt;/p&gt;
&lt;h2 id="summary"&gt;Summary&lt;a class="headerlink" href="#summary" title="Permanent link"&gt;▶&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We learnt how to live without virtualenv&amp;nbsp;wrapper&lt;/li&gt;
&lt;li&gt;having python libraries installed, alongside your project helps you search and go over code base&amp;nbsp;easily&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Edits&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add enhancemnet to alias &lt;code&gt;sv&lt;/code&gt;, based on @chadhs&amp;nbsp;suggestion&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; in &lt;code&gt;sv&lt;/code&gt; alias so that &lt;span class="caps"&gt;PS&lt;/span&gt; is updated only when command succeed. Thanks&amp;nbsp;@petrjoachim.&lt;/li&gt;
&lt;/ul&gt;</content><category term="shell"></category><category term="python"></category><category term="virtualenv"></category></entry></feed>